{"version":3,"sources":["views/DesktopView.js","views/MobileView.js","views/CodeView.js","views/Navigation.js","views/ListView.js","App.js","serviceWorker.js","index.js"],"names":["DeskTopView","prop","zoomIn","zoomOut","resetTransform","Fragment","className","url","src","id","sandbox","clsx","isMobile","onLoad","iFrameLoaded","position","MobileView","CodeView","props","componentDidMount","fetchContent","fetchRawContent","key","fetch","then","response","text","dataStr","codeMap","encodeURIComponent","parseJson","data","obj","files","fileCnt","hasOwnProperty","raw_url","setManifest","content","pageCnt","onPageCountChange","gistId","json","getFrameSource","codeId","pageNum","param1","length","loaded","setState","hasFrameLoaded","state","this","React","PureComponent","useStyles","makeStyles","theme","root","marginTop","spacing","Navigation","useState","setPage","classList","ref","useRef","useLayoutEffect","target","current","disablePinchZoom","e","touches","preventDefault","addEventListener","passive","removeEventListener","Pagination","page","count","pageCount","color","onChange","event","value","onPageChange","list","width","fullList","ListView","classes","ref1","createRef","selectedIndex","setSelectedIndex","top","left","bottom","right","toggleDrawer","anchor","open","type","attachListener","ctrlKey","useEffect","setTimeout","console","log","IconButton","onClick","handleMenuOpen","Drawer","onClose","role","onKeyDown","List","map","index","ListItem","button","ListItemIcon","ListItemText","primary","Divider","manifest","parseInt","selected","name","Chip","size","label","tag","App","handleWindowSizeChange","window","innerWidth","JSON","parse","arr","push","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.aa41469b.chunk.js","sourcesContent":["import React from 'react'\nimport Iframe from 'react-iframe'\nimport clsx from 'clsx';\nimport './CodeView.css';\n\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\nfunction DeskTopView(prop) {\n   return (\n    <TransformWrapper>\n        {({ zoomIn, zoomOut, resetTransform, ...rest }) => (\n            <React.Fragment>\n            <TransformComponent>\n                <div className=\"IframeClass\">\n                <Iframe url={prop.src}\n                    id=\"myId\"\n                    sandbox=\"allow-scripts allow-same-origin\"\n                    className={clsx(\"CodeView\", prop.isMobile && 'IframeClassMobile')}\n                    onLoad={() => prop.iFrameLoaded(true)}\n                    position=\"relative\"/>\n                </div>\n            </TransformComponent>\n            </React.Fragment>\n        )}\n      </TransformWrapper>)\n}\n\nexport default DeskTopView;","import React, { useRef } from 'react'\nimport clamp from 'lodash-es/clamp'\nimport { useSprings, animated } from 'react-spring'\nimport { useDrag } from 'react-use-gesture'\nimport './MobileView.css'\n\nconst pages = [\n  'https://images.pexels.com/photos/62689/pexels-photo-62689.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',\n  'https://images.pexels.com/photos/296878/pexels-photo-296878.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',\n  'https://images.pexels.com/photos/1509428/pexels-photo-1509428.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',\n  'https://images.pexels.com/photos/351265/pexels-photo-351265.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',\n  'https://images.pexels.com/photos/924675/pexels-photo-924675.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260'\n]\n\nfunction MobileView() {\n  const index = useRef(0)\n  const [props, set] = useSprings(pages.length, i => ({\n    x: i * window.innerWidth,\n    scale: 1,\n    display: 'block'\n  }))\n  const bind = useDrag(({ down, movement: [mx], direction: [xDir], distance, cancel }) => {\n    if (down && distance > window.innerWidth / 2)\n      cancel((index.current = clamp(index.current + (xDir > 0 ? -1 : 1), 0, pages.length - 1)))\n    set(i => {\n      if (i < index.current - 1 || i > index.current + 1) return { display: 'none' }\n      const x = (i - index.current) * window.innerWidth + (down ? mx : 0)\n      const scale = down ? 1 - distance / window.innerWidth / 2 : 1\n      return { x, scale, display: 'block' }\n    })\n  })\n  return props.map(({ x, display, scale }, i) => (\n    <animated.div {...bind()} key={i} style={{ display, x }}>\n      <animated.div style={{ scale, backgroundImage: `url(${pages[i]})` }} />\n    </animated.div>\n  ))\n}\n\nexport default MobileView;","import React from 'react';\nimport DeskTopView from './DesktopView.js'\nimport MobileView from './MobileView.js'\n\nclass CodeView extends React.PureComponent {\n    constructor(props){\n        super(props);\n        this.gistId = \"ab55cb8921d8538dabad8d6d2b16afde\";\n        this.codeMap = [];\n\t\tthis.state = {\n            hasFrameLoaded : false\n        }\n    }\n\n    componentDidMount = () => {\n        this.fetchContent();\n    }\n\n    fetchRawContent = (key, url)=>{\n        fetch(url)\n        .then(response => response.text()) \n        .then((dataStr) => {this.codeMap[key] = encodeURIComponent(encodeURIComponent(dataStr))});\n    }\n\n    parseJson = (data) =>{\n        let obj = data.files;\n        let fileCnt = 0;\n        for (let key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                this.fetchRawContent(key, obj[key].raw_url);\n                fileCnt++;\n            }\n        }\n        this.props.setManifest(obj[0].content);\n        this.pageCnt = fileCnt-1;\n        this.props.onPageCountChange(this.pageCnt);\n    }\n\n    fetchContent = () => {\n        fetch('https://api.github.com/gists/'+this.gistId)\n        .then(response => response.json())\n        .then(data => {this.parseJson(data)});\n    }\n\n    getFrameSource = () => {\n        let codeId = this.props.pageNum; \n        let fontSize = this.props.isMobile?\"10px\":\"14px\";\n        const param1 = \"bg=rgba(171%2C%20184%2C%20195%2C%201)&t=seti&wt=none&l=c&ds=true&dsyoff=10px&dsblur=18px&fs=\"+fontSize;\n        //const param = \"bg=rgba(171%2C%20184%2C%20195%2C%201)&t=seti&wt=none&l=c&ds=true&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=200px&ph=72px&ln=false&fl=1&fm=Hack&fs=14px&lh=133%25&si=false&es=2x&wm=false\";\n        if(this.codeMap.length <= codeId)\n            return \"https://carbon.now.sh/embed/\"+this.gistId+\"?filename=\"+codeId+\"&\"+param1;\n        return \"https://carbon.now.sh/embed/[id]?\"+param1+\"&code=\"+this.codeMap[codeId];\n    }\n\n    iFrameLoaded = (loaded) => {\n        this.setState({ hasFrameLoaded: loaded });\n    }\n\n    render(){\n        let src = this.getFrameSource();\n        return (\n            <div>\n            {<DeskTopView src={src} iFrameLoaded={this.iFrameLoaded} isMobile={this.props.isMobile}/>}\n            {false && <MobileView/>}\n            </div>\n        );\n    }\n}\nexport default CodeView;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Pagination from '@material-ui/lab/Pagination';\n\nimport './Navigation.css';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      marginTop: theme.spacing(2)\n    },\n  },\n}));\n\nexport default function Navigation(props) {\n    const [page, setPage] = React.useState(1);\n    const classes = useStyles();\n    const classList = classes.root+\" NavigationView\"\n\n    const handleChange = (event, value) => {\n        setPage(value);\n        props.onPageChange(value);\n    };\n    const ref = React.useRef(null)\n    // const ref = useRef<HTMLDivElement>(null)\n  \n    React.useLayoutEffect(() => {\n      const target = ref.current\n      if (!target) return\n      const disablePinchZoom = (e) => {\n        if (e.touches && e.touches.length > 1) {\n          e.preventDefault()\n        }\n        if(!e.touches){\n            e.preventDefault()\n        }\n      }\n      target.addEventListener(\"touchmove\", disablePinchZoom, { passive: false })\n      target.addEventListener(\"wheel\", disablePinchZoom, { passive: false })\n      return () => {\n        target.removeEventListener(\"touchmove\", disablePinchZoom)\n        target.removeEventListener(\"wheel\", disablePinchZoom)\n      }\n    }, [])\n\n    return (\n        <div ref={ref} className={classList}>\n            <div className=\"NavigationViewInner\">\n            <Pagination page={props.pageNum} count={props.pageCount} color=\"primary\" onChange={handleChange}/>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport CodeIcon from '@material-ui/icons/Code';\nimport AppsIcon from '@material-ui/icons/Apps';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Chip from '@material-ui/core/Chip';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n\nimport './ListView.css';\n\nconst useStyles = makeStyles({\n  list: {\n    width: 350,\n  },\n  fullList: {\n    width: 'auto',\n  },\n});\n\nexport default function ListView(props) {\n  const classes = useStyles();\n  const ref = React.useRef(null);\n  const ref1 = React.useRef(React.createRef());\n  const [selectedIndex, setSelectedIndex] = React.useState(1);\n  const [state, setState] = React.useState({\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  });\n\n  const toggleDrawer = (anchor, open) => (event) => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n\n    setState({ ...state, [anchor]: open });\n  };\n\n  const handleClick = (id) => {\n    setSelectedIndex(id);\n    props.onPageChange(parseInt(id));\n  }\n  const handleMenuOpen = (anchor, open, pageNum) => (event) => {\n    setSelectedIndex(pageNum);\n    toggleDrawer(anchor, open)(event)\n  }\n\n  const list = (anchor, ref1) => {\n      return (\n        <div ref={ref1}\n        className={clsx(classes.list, {\n            [classes.fullList]: anchor === 'top' || anchor === 'bottom',\n        })}\n        role=\"presentation\"\n        onClick={toggleDrawer(anchor, false)}\n        onKeyDown={toggleDrawer(anchor, false)}\n        >\n        <List>\n            {['Problems Browser'].map((text, index) => (\n            <ListItem button key={text}>\n                <ListItemIcon><ArrowBackIcon/></ListItemIcon>\n                <ListItemText primary={text} />\n            </ListItem>\n            ))}\n        </List>\n        <Divider />\n        <List>\n            {props.manifest.map((obj, index) => (\n            <ListItem button key={obj.id} onClick={()=>{handleClick(obj.id)}} selected={selectedIndex == obj.id}>\n                <ListItemIcon>{index % 2 === 0 ? <CodeIcon /> : <CodeIcon />}</ListItemIcon>\n                <ListItemText primary={obj.name} />\n                <Chip size=\"small\" label={obj.tag} />\n            </ListItem>\n            ))}\n        </List>\n        </div>\n  )};\n  const anchor = 'left';\n\n  const attachListener = () =>{\n    const target = ref1.current;\n    if (!target || !target.addEventListener) return\n    const disablePinchZoom = (e) => {\n      if (e.touches && e.touches.length > 1) {\n        e.preventDefault()\n      }\n      else if(e.ctrlKey){\n          e.preventDefault()\n      }\n    }\n    target.addEventListener(\"touchmove\", disablePinchZoom, { passive: false })\n    target.addEventListener(\"wheel\", disablePinchZoom, { passive: false })\n  }\n\n  React.useEffect(() => {\n    setTimeout(attachListener, 200);\n  });\n\n  React.useLayoutEffect(() => {\n      console.log(\"useLayoutEffect called\")\n    const target = ref.current;\n    if (!target) return\n    const disablePinchZoom = (e) => {\n      if (e.touches && e.touches.length > 1) {\n        e.preventDefault()\n      }\n      if(!e.touches){\n          e.preventDefault()\n      }\n    }\n    target.addEventListener(\"touchmove\", disablePinchZoom, { passive: false })\n    target.addEventListener(\"wheel\", disablePinchZoom, { passive: false })\n    return () => {\n      target.removeEventListener(\"touchmove\", disablePinchZoom)\n      target.removeEventListener(\"wheel\", disablePinchZoom)\n    }\n  }, [])\n\n  return (\n    <div ref={ref} className=\"ListView\">\n    <React.Fragment key={anchor}>\n        <IconButton onClick={handleMenuOpen(anchor,true,props.pageNum)}><MenuIcon/></IconButton>\n        <Drawer anchor={anchor} open={state[anchor]} onClose={toggleDrawer(anchor, false)}>\n        {list(anchor,ref1)}\n        </Drawer>\n    </React.Fragment>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport CodeView from './views/CodeView.js';\nimport Navigation from './views/Navigation.js';\nimport ListView from './views/ListView.js';\nclass App extends React.PureComponent { \n\n  constructor(props){\n    super(props);\n\t\tthis.state = {\n      pageNum:1,\n      pageCount:3,\n      width: window.innerWidth,\n      manifest:[],\n\t\t}\n  }\n\n  componentWillMount() {\n    window.addEventListener('resize', this.handleWindowSizeChange);\n  }\n  \n  // make sure to remove the listener\n  // when the component is not mounted anymore\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleWindowSizeChange);\n  }\n  \n  handleWindowSizeChange = () => {\n    this.setState({ width: window.innerWidth });\n  };\n\n  onPageCountChange = (count) =>{\n\t\tthis.setState({ pageCount: count });\n  }\n\n  onPageChange = (page)=>{\n\t\tthis.setState({ pageNum: page });\n  }\n\n  setManifest = (data) => {\n    let obj = JSON.parse(data);\n    let arr = [];\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        arr.push({\"id\":key,\"name\":obj[key].name,\"tag\":obj[key].tag})\n      }\n    }\n    this.setState({ manifest: arr });\n  }\n\n  render() { \n    const { width } = this.state;\n    const isMobile = width <= 500;\n    return (\n      <div className=\"App\">\n        <ListView manifest={this.state.manifest}\n                  onPageChange={this.onPageChange}\n                  pageNum={this.state.pageNum}/>\n        <CodeView pageNum={this.state.pageNum} \n                  onPageCountChange = {this.onPageCountChange}\n                  setManifest = {this.setManifest}\n                  isMobile = {isMobile}/>\n        { <Navigation pageNum={this.state.pageNum}\n                  onPageChange={this.onPageChange} \n                  pageCount={this.state.pageCount}/>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}