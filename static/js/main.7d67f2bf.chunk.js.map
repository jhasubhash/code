{"version":3,"sources":["views/DesktopView.js","views/MobileView.js","views/CodeView.js","views/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["DeskTopView","prop","className","url","src","id","sandbox","onLoad","iFrameLoaded","position","MobileView","CodeView","props","componentDidMount","fetchContent","fetchRawContent","key","fetch","then","response","text","dataStr","codeMap","encodeURIComponent","parseJson","data","obj","files","fileCnt","hasOwnProperty","raw_url","pageCnt","onPageCountChange","gistId","json","getFrameSource","codeId","pageNum","param1","length","loaded","setState","hasFrameLoaded","state","this","React","PureComponent","useStyles","makeStyles","theme","root","marginTop","spacing","Navigation","classList","Pagination","count","pageCount","color","onChange","onPageChange","App","handleWindowSizeChange","width","window","innerWidth","e","page","addEventListener","removeEventListener","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7d67f2bf.chunk.js","sourcesContent":["import React from 'react'\nimport Iframe from 'react-iframe'\nimport './CodeView.css';\n\nfunction DeskTopView(prop) {\n   return <div className=\"IframeClass\">\n            <Iframe url={prop.src}\n                id=\"myId\"\n                sandbox=\"allow-scripts allow-same-origin\"\n                className=\"CodeView\"\n                onLoad={() => prop.iFrameLoaded(true)}\n                position=\"relative\"/>\n            </div>\n}\n\nexport default DeskTopView;","import React, { useRef } from 'react'\nimport clamp from 'lodash-es/clamp'\nimport { useSprings, animated } from 'react-spring'\nimport { useDrag } from 'react-use-gesture'\nimport './MobileView.css'\n\nconst pages = [\n  'https://images.pexels.com/photos/62689/pexels-photo-62689.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',\n  'https://images.pexels.com/photos/296878/pexels-photo-296878.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',\n  'https://images.pexels.com/photos/1509428/pexels-photo-1509428.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',\n  'https://images.pexels.com/photos/351265/pexels-photo-351265.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',\n  'https://images.pexels.com/photos/924675/pexels-photo-924675.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260'\n]\n\nfunction MobileView() {\n  const index = useRef(0)\n  const [props, set] = useSprings(pages.length, i => ({\n    x: i * window.innerWidth,\n    scale: 1,\n    display: 'block'\n  }))\n  const bind = useDrag(({ down, movement: [mx], direction: [xDir], distance, cancel }) => {\n    if (down && distance > window.innerWidth / 2)\n      cancel((index.current = clamp(index.current + (xDir > 0 ? -1 : 1), 0, pages.length - 1)))\n    set(i => {\n      if (i < index.current - 1 || i > index.current + 1) return { display: 'none' }\n      const x = (i - index.current) * window.innerWidth + (down ? mx : 0)\n      const scale = down ? 1 - distance / window.innerWidth / 2 : 1\n      return { x, scale, display: 'block' }\n    })\n  })\n  return props.map(({ x, display, scale }, i) => (\n    <animated.div {...bind()} key={i} style={{ display, x }}>\n      <animated.div style={{ scale, backgroundImage: `url(${pages[i]})` }} />\n    </animated.div>\n  ))\n}\n\nexport default MobileView;","import React from 'react';\nimport DeskTopView from './DesktopView.js'\nimport MobileView from './MobileView.js'\n\nclass CodeView extends React.PureComponent {\n    constructor(props){\n        super(props);\n        this.gistId = \"ab55cb8921d8538dabad8d6d2b16afde\";\n        this.codeMap = [];\n\t\tthis.state = {\n            hasFrameLoaded : false\n        }\n    }\n\n    componentDidMount = () => {\n        this.fetchContent();\n    }\n\n    fetchRawContent = (key, url)=>{\n        fetch(url)\n        .then(response => response.text()) \n        .then((dataStr) => {this.codeMap[key] = encodeURIComponent(encodeURIComponent(dataStr))});\n    }\n\n    parseJson = (data) =>{\n        let obj = data.files;\n        let fileCnt = 0;\n        for (let key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                this.fetchRawContent(key, obj[key].raw_url);\n                fileCnt++;\n            }\n        }\n        this.pageCnt = fileCnt-1;\n        this.props.onPageCountChange(this.pageCnt);\n    }\n\n    fetchContent = () => {\n        fetch('https://api.github.com/gists/'+this.gistId)\n        .then(response => response.json())\n        .then(data => {this.parseJson(data)});\n    }\n\n    getFrameSource = () => {\n        let codeId = this.props.pageNum; \n        const param1 = \"bg=rgba(171%2C%20184%2C%20195%2C%201)&t=seti&wt=none&l=c&ds=true&dsyoff=10px&dsblur=18px&fs=14px\";\n        //const param = \"bg=rgba(171%2C%20184%2C%20195%2C%201)&t=seti&wt=none&l=c&ds=true&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=200px&ph=72px&ln=false&fl=1&fm=Hack&fs=14px&lh=133%25&si=false&es=2x&wm=false\";\n        if(this.codeMap.length <= codeId)\n            return \"https://carbon.now.sh/embed/\"+this.gistId+\"?filename=\"+codeId+\"&\"+param1;\n        return \"https://carbon.now.sh/embed/[id]?\"+param1+\"&code=\"+this.codeMap[codeId];\n    }\n\n    iFrameLoaded = (loaded) => {\n        this.setState({ hasFrameLoaded: loaded });\n    }\n\n    render(){\n        let src = this.getFrameSource();\n        return (\n            <div>\n            {<DeskTopView src={src} iFrameLoaded={this.iFrameLoaded}/>}\n            {false && <MobileView/>}\n            </div>\n        );\n    }\n}\nexport default CodeView;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Pagination from '@material-ui/lab/Pagination';\n\nimport './Navigation.css';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      marginTop: theme.spacing(2)\n    },\n  },\n}));\n\nexport default function Navigation(props) {\n  const classes = useStyles();\n  const classList = classes.root+\" NavigationView\"\n  return (\n    <div className={classList}>\n        <div className=\"NavigationViewInner\">\n        <Pagination count={props.pageCount} color=\"primary\" onChange={props.onPageChange}/>\n        </div>\n    </div>\n  );\n}","import React from 'react';\nimport './App.css';\nimport CodeView from './views/CodeView.js';\nimport Navigation from './views/Navigation.js';\n\nclass App extends React.PureComponent { \n\n  constructor(props){\n    super(props);\n\t\tthis.state = {\n      pageNum:1,\n      pageCount:3,\n      width: window.innerWidth,\n\t\t}\n  }\n\n  componentWillMount() {\n    window.addEventListener('resize', this.handleWindowSizeChange);\n  }\n  \n  // make sure to remove the listener\n  // when the component is not mounted anymore\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleWindowSizeChange);\n  }\n  \n  handleWindowSizeChange = () => {\n    this.setState({ width: window.innerWidth });\n  };\n\n  onPageCountChange = (count) =>{\n\t\tthis.setState({ pageCount: count });\n  }\n\n  onPageChange = (e, page)=>{\n\t\tthis.setState({ pageNum: page });\n  }\n\n  render() { \n    const { width } = this.state;\n    const isMobile = width <= 500;\n    return (\n      <div className=\"App\">\n        <CodeView codeId={this.props.codeId} pageNum={this.state.pageNum} \n                  onPageCountChange = {this.onPageCountChange}/>\n        { <Navigation onPageChange={this.onPageChange} pageCount={this.state.pageCount}/>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}